"use strict";
(self["webpackChunkthirdweb_learn_theme"] = self["webpackChunkthirdweb_learn_theme"] || []).push([["vendors-node_modules_thirdweb-dev_sdk_dist_multiwrap-cd0c9c88_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/multiwrap-cd0c9c88.browser.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/multiwrap-cd0c9c88.browser.esm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Multiwrap: () => (/* binding */ Multiwrap)
/* harmony export */ });
/* harmony import */ var _QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./QueryParams-7d9473b5.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/QueryParams-7d9473b5.browser.esm.js");
/* harmony import */ var _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./contract-metadata-88f06ef9.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/contract-metadata-88f06ef9.browser.esm.js");
/* harmony import */ var _erc_721_standard_b90faf4d_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./erc-721-standard-b90faf4d.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-b90faf4d.browser.esm.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ "./node_modules/@ethersproject/units/lib.esm/index.js");
/* harmony import */ var _hasERC20Allowance_59b9da80_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hasERC20Allowance-59b9da80.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/hasERC20Allowance-59b9da80.browser.esm.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/esm/tiny-invariant.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.mjs");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! merkletreejs */ "./node_modules/merkletreejs/dist/index.js");
/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js");
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! bs58 */ "./node_modules/bs58/index.js");
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_6__);















































































/**
 * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.
 *
 * @example
 *
 * ```javascript
 * import { ThirdwebSDK } from "@thirdweb-dev/sdk";
 *
 * const sdk = new ThirdwebSDK("{{chainName}}");
 * const contract = await sdk.getContract("{{contract_address}}", "multiwrap");
 * ```
 *
 * @beta
 */
class Multiwrap extends _erc_721_standard_b90faf4d_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.S {
  /**
   * Configure royalties
   * @remarks Set your own royalties for the entire contract or per token
   * @example
   * ```javascript
   * // royalties on the whole contract
   * contract.royalties.setDefaultRoyaltyInfo({
   *   seller_fee_basis_points: 100, // 1%
   *   fee_recipient: "0x..."
   * });
   * // override royalty for a particular token
   * contract.royalties.setTokenRoyaltyInfo(tokenId, {
   *   seller_fee_basis_points: 500, // 5%
   *   fee_recipient: "0x..."
   * });
   * ```
   */

  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : undefined;
    let chainId = arguments.length > 5 ? arguments[5] : undefined;
    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dz(network, address, abi, options);
    super(contractWrapper, storage, chainId);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "abi", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "encoder", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "estimator", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "metadata", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "app", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "events", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "roles", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "royalties", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "owner", void 0);
    /** ******************************
     * WRITE FUNCTIONS
     *******************************/
    /**
     * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token
     * @example
     * ```javascript
     * const tx = await contract.wrap({
     *   erc20Tokens: [{
     *     contractAddress: "0x...",
     *     quantity: "0.8"
     *   }],
     *   erc721Tokens: [{
     *     contractAddress: "0x...",
     *     tokenId: "0"
     *   }],
     *   erc1155Tokens: [{
     *     contractAddress: "0x...",
     *     tokenId: "1",
     *     quantity: "2"
     *   }]
     * }, {
     *     name: "Wrapped bundle",
     *     description: "This is a wrapped bundle of tokens and NFTs",
     *     image: "ipfs://...",
     * });
     * const receipt = tx.receipt(); // the transaction receipt
     * const wrappedTokenId = tx.id; // the id of the wrapped token bundle
     * ```
     * @param contents - the contents to wrap
     * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle
     * @param recipientAddress - Optional. The address to send the wrapped token bundle to
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "wrap", (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ds)(async (contents, wrappedTokenMetadata, recipientAddress) => {
      const uri = await (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dK)(wrappedTokenMetadata, this.storage);
      const recipient = await (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.cH)(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());
      const tokens = await this.toTokenStructList(contents);
      return _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aV.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "wrap",
        args: [tokens, uri, recipient],
        parse: receipt => {
          const event = this.contractWrapper.parseLogs("TokensWrapped", receipt?.logs);
          if (event.length === 0) {
            throw new Error("TokensWrapped event not found");
          }
          const tokenId = event[0].args.tokenIdOfWrappedToken;
          return {
            id: tokenId,
            receipt,
            data: () => this.get(tokenId)
          };
        }
      });
    }));
    /**
     * Unwrap a wrapped token bundle, and retrieve its contents
     * @example
     * ```javascript
     * await contract.unwrap(wrappedTokenId);
     * ```
     * @param wrappedTokenId - the id of the wrapped token bundle
     * @param recipientAddress - Optional. The address to send the unwrapped tokens to
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "unwrap", (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ds)(async (wrappedTokenId, recipientAddress) => {
      const recipient = await (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.cH)(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());
      return _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aV.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "unwrap",
        args: [wrappedTokenId, recipient]
      });
    }));
    this.abi = _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.e.parse(abi || []);
    this.metadata = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ag(this.contractWrapper, _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dJ, this.storage);
    this.app = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.a$(this.contractWrapper, this.metadata, this.storage);
    this.roles = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ah(this.contractWrapper, Multiwrap.contractRoles);
    this.encoder = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.af(this.contractWrapper);
    this.estimator = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aP(this.contractWrapper);
    this.events = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aQ(this.contractWrapper);
    this.royalties = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ai(this.contractWrapper, this.metadata);
    this.owner = new _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aU(this.contractWrapper);
  }

  /** ******************************
   * READ FUNCTIONS
   *******************************/

  /**
   * Get the contents of a wrapped token bundle
   * @example
   * ```javascript
   * const contents = await contract.getWrappedContents(wrappedTokenId);
   * console.log(contents.erc20Tokens);
   * console.log(contents.erc721Tokens);
   * console.log(contents.erc1155Tokens);
   * ```
   * @param wrappedTokenId - the id of the wrapped token bundle
   */
  async getWrappedContents(wrappedTokenId) {
    const wrappedTokens = await this.contractWrapper.readContract.getWrappedContents(wrappedTokenId);
    const erc20Tokens = [];
    const erc721Tokens = [];
    const erc1155Tokens = [];
    for (const token of wrappedTokens) {
      switch (token.tokenType) {
        case 0:
          {
            const tokenMetadata = await (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.b8)(this.contractWrapper.getProvider(), token.assetContract);
            erc20Tokens.push({
              contractAddress: token.assetContract,
              quantity: ethers__WEBPACK_IMPORTED_MODULE_10__.formatUnits(token.totalAmount, tokenMetadata.decimals)
            });
            break;
          }
        case 1:
          {
            erc721Tokens.push({
              contractAddress: token.assetContract,
              tokenId: token.tokenId
            });
            break;
          }
        case 2:
          {
            erc1155Tokens.push({
              contractAddress: token.assetContract,
              tokenId: token.tokenId,
              quantity: token.totalAmount.toString()
            });
            break;
          }
      }
    }
    return {
      erc20Tokens,
      erc721Tokens,
      erc1155Tokens
    };
  }
  /** ******************************
   * PRIVATE FUNCTIONS
   *******************************/

  async toTokenStructList(contents) {
    const tokens = [];
    const provider = this.contractWrapper.getProvider();
    const owner = await this.contractWrapper.getSignerAddress();
    if (contents.erc20Tokens) {
      for (const erc20 of contents.erc20Tokens) {
        const normalizedQuantity = await (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.b7)(provider, erc20.quantity, erc20.contractAddress);
        const hasAllowance = await (0,_hasERC20Allowance_59b9da80_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.h)(this.contractWrapper, erc20.contractAddress, normalizedQuantity);
        if (!hasAllowance) {
          throw new Error(`ERC20 token with contract address "${erc20.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${erc20.contractAddress}").setAllowance("${this.getAddress()}", ${erc20.quantity});\n\n`);
        }
        tokens.push({
          assetContract: erc20.contractAddress,
          totalAmount: normalizedQuantity,
          tokenId: 0,
          tokenType: 0
        });
      }
    }
    if (contents.erc721Tokens) {
      for (const erc721 of contents.erc721Tokens) {
        const isApproved = await (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dv)(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);
        if (!isApproved) {
          throw new Error(`ERC721 token "${erc721.tokenId}" with contract address "${erc721.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${erc721.contractAddress}").setApprovalForToken("${this.getAddress()}", ${erc721.tokenId});\n\n`);
        }
        tokens.push({
          assetContract: erc721.contractAddress,
          totalAmount: 0,
          tokenId: erc721.tokenId,
          tokenType: 1
        });
      }
    }
    if (contents.erc1155Tokens) {
      for (const erc1155 of contents.erc1155Tokens) {
        const isApproved = await (0,_contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dv)(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);
        if (!isApproved) {
          throw new Error(`ERC1155 token "${erc1155.tokenId}" with contract address "${erc1155.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${erc1155.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);
        }
        tokens.push({
          assetContract: erc1155.contractAddress,
          totalAmount: erc1155.quantity,
          tokenId: erc1155.tokenId,
          tokenType: 2
        });
      }
    }
    return tokens;
  }

  /**
   * @internal
   */
  async prepare(method, args, overrides) {
    return _contract_metadata_88f06ef9_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aV.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }

  /**
   * @internal
   */
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
}
(0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(Multiwrap, "contractRoles", ["admin", "transfer", "minter", "unwrap", "asset"]);




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfdGhpcmR3ZWItZGV2X3Nka19kaXN0X211bHRpd3JhcC1jZDBjOWM4OF9icm93c2VyX2VzbV9qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZFO0FBQ3VhO0FBQ25hO0FBQ2pEO0FBQ3FEO0FBQ3RFO0FBQ0Y7QUFDaUI7QUFDb0M7QUFDVDtBQUNRO0FBQ0c7QUFDRztBQUNiO0FBQ007QUFDRTtBQUNKO0FBQ1M7QUFDSjtBQUNDO0FBQ0Y7QUFDQTtBQUNQO0FBQ1U7QUFDSjtBQUNKO0FBQ007QUFDSztBQUNHO0FBQ1A7QUFDQTtBQUNDO0FBQ1I7QUFDTTtBQUNLO0FBQ0c7QUFDZjtBQUNVO0FBQ0Y7QUFDSztBQUNQO0FBQ1A7QUFDVTtBQUNGO0FBQ0M7QUFDVDtBQUNPO0FBQ0Y7QUFDVTtBQUNWO0FBQ0E7QUFDSjtBQUNEO0FBQ1E7QUFDUDtBQUNwQztBQUM2QztBQUM5QztBQUNzQztBQUM5QjtBQUNWO0FBQ2dEO0FBQ3hDO0FBQ3FDO0FBQ3BEO0FBQ1E7QUFDRztBQUNrQztBQUNRO0FBQ0M7QUFDUTtBQUNsRDtBQUNaO0FBQytEO0FBQ0M7QUFDeEM7QUFDdUI7QUFDQzs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0Esa0NBQWtDLFdBQVc7QUFDN0MsNkNBQTZDLGtCQUFrQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3RUFBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRywwRUFBZTtBQUNqSDtBQUNBLElBQUksdUVBQWU7QUFDbkIsSUFBSSx1RUFBZTtBQUNuQixJQUFJLHVFQUFlO0FBQ25CLElBQUksdUVBQWU7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IndlYnBhY2s6Ly90aGlyZHdlYi1sZWFybi10aGVtZS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3Nkay9kaXN0L211bHRpd3JhcC1jZDBjOWM4OC5icm93c2VyLmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vUXVlcnlQYXJhbXMtN2Q5NDczYjUuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgZHogYXMgQ29udHJhY3RXcmFwcGVyLCBkcyBhcyBidWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24sIGUgYXMgQWJpU2NoZW1hLCBhZyBhcyBDb250cmFjdE1ldGFkYXRhLCBkSiBhcyBNdWx0aXdyYXBDb250cmFjdFNjaGVtYSwgYSQgYXMgQ29udHJhY3RBcHBVUkksIGFoIGFzIENvbnRyYWN0Um9sZXMsIGFmIGFzIENvbnRyYWN0RW5jb2RlciwgYVAgYXMgR2FzQ29zdEVzdGltYXRvciwgYVEgYXMgQ29udHJhY3RFdmVudHMsIGFpIGFzIENvbnRyYWN0Um95YWx0eSwgYVUgYXMgQ29udHJhY3RPd25lciwgYjggYXMgZmV0Y2hDdXJyZW5jeU1ldGFkYXRhLCBiNyBhcyBub3JtYWxpemVQcmljZVZhbHVlLCBkdiBhcyBpc1Rva2VuQXBwcm92ZWRGb3JUcmFuc2ZlciwgYVYgYXMgVHJhbnNhY3Rpb24sIGRLIGFzIHVwbG9hZE9yRXh0cmFjdFVSSSwgY0ggYXMgcmVzb2x2ZUFkZHJlc3MgfSBmcm9tICcuL2NvbnRyYWN0LW1ldGFkYXRhLTg4ZjA2ZWY5LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IFMgYXMgU3RhbmRhcmRFcmM3MjEgfSBmcm9tICcuL2VyYy03MjEtc3RhbmRhcmQtYjkwZmFmNGQuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IGggYXMgaGFzRVJDMjBBbGxvd2FuY2UgfSBmcm9tICcuL2hhc0VSQzIwQWxsb3dhbmNlLTU5YjlkYTgwLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnYm4uanMnO1xuaW1wb3J0ICd6b2QnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NoYWlucyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQnVybmFibGVFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BFUkMyMF9WMi5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2UuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlX1YxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzIwUGVybWl0Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU1pbnRhYmxlRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTXVsdGljYWxsLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lCdXJuYWJsZUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lDbGFpbWFibGVFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRGVsYXllZFJldmVhbC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wRVJDNzIxX1YzLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFFbnVtZXJhYmxlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMVN1cHBseS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lMYXp5TWludC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNaW50YWJsZUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkM3MjFfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9MYXp5TWludFdpdGhUaWVyLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUJ1cm5hYmxlRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lDbGFpbWFibGVFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3AxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BFUkMxMTU1X1YyLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZTExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlMTE1NV9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzExNTVFbnVtZXJhYmxlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU1pbnRhYmxlRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0VSQzI3NzFDb250ZXh0Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUFwcFVSSS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lDb250cmFjdE1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURpcmVjdExpc3RpbmdzLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVuZ2xpc2hBdWN0aW9ucy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lPZmZlcnMuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUGFja1ZSRkRpcmVjdC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQZXJtaXNzaW9ucy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQZXJtaXNzaW9uc0VudW1lcmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUGxhdGZvcm1GZWUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUHJpbWFyeVNhbGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUm95YWx0eS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL093bmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWNjb3VudEZhY3RvcnkuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWNjb3VudC5qc29uJztcbmltcG9ydCAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvQ29udHJhY3RQdWJsaXNoZXIuanNvbic7XG5pbXBvcnQgJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvRm9yd2FyZGVyLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L3N0b3JhZ2UnO1xuaW1wb3J0ICdjcm9zcy1mZXRjaCc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JVGhpcmR3ZWJDb250cmFjdC5qc29uJztcbmltcG9ydCAnZXRoZXJzL2xpYi91dGlscy5qcyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjBNZXRhZGF0YS5qc29uJztcbmltcG9ydCAndXVpZCc7XG5pbXBvcnQgJ21lcmtsZXRyZWVqcyc7XG5pbXBvcnQgJ2Zhc3QtZGVlcC1lcXVhbCc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTY1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMU1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzExNTVNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEZWxheWVkUmV2ZWFsRGVwcmVjYXRlZC5qc29uJztcbmltcG9ydCAnZXRoZXJzL2xpYi91dGlscyc7XG5pbXBvcnQgJ2JzNTgnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvVFdNdWx0aWNoYWluUmVnaXN0cnlMb2dpYy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL1RXTXVsdGljaGFpblJlZ2lzdHJ5Um91dGVyLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2dlbmVyYXRlZC1hYmlzJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL1RXRmFjdG9yeS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL1RXUmVnaXN0cnkuanNvbic7XG5cbi8qKlxuICogTXVsdGl3cmFwIGxldHMgeW91IHdyYXAgYW55IG51bWJlciBvZiBFUkMyMCwgRVJDNzIxIGFuZCBFUkMxMTU1IHRva2VucyB5b3Ugb3duIGludG8gYSBzaW5nbGUgd3JhcHBlZCB0b2tlbiBidW5kbGUuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBUaGlyZHdlYlNESyB9IGZyb20gXCJAdGhpcmR3ZWItZGV2L3Nka1wiO1xuICpcbiAqIGNvbnN0IHNkayA9IG5ldyBUaGlyZHdlYlNESyhcInt7Y2hhaW5OYW1lfX1cIik7XG4gKiBjb25zdCBjb250cmFjdCA9IGF3YWl0IHNkay5nZXRDb250cmFjdChcInt7Y29udHJhY3RfYWRkcmVzc319XCIsIFwibXVsdGl3cmFwXCIpO1xuICogYGBgXG4gKlxuICogQGJldGFcbiAqL1xuY2xhc3MgTXVsdGl3cmFwIGV4dGVuZHMgU3RhbmRhcmRFcmM3MjEge1xuICAvKipcbiAgICogQ29uZmlndXJlIHJveWFsdGllc1xuICAgKiBAcmVtYXJrcyBTZXQgeW91ciBvd24gcm95YWx0aWVzIGZvciB0aGUgZW50aXJlIGNvbnRyYWN0IG9yIHBlciB0b2tlblxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIHJveWFsdGllcyBvbiB0aGUgd2hvbGUgY29udHJhY3RcbiAgICogY29udHJhY3Qucm95YWx0aWVzLnNldERlZmF1bHRSb3lhbHR5SW5mbyh7XG4gICAqICAgc2VsbGVyX2ZlZV9iYXNpc19wb2ludHM6IDEwMCwgLy8gMSVcbiAgICogICBmZWVfcmVjaXBpZW50OiBcIjB4Li4uXCJcbiAgICogfSk7XG4gICAqIC8vIG92ZXJyaWRlIHJveWFsdHkgZm9yIGEgcGFydGljdWxhciB0b2tlblxuICAgKiBjb250cmFjdC5yb3lhbHRpZXMuc2V0VG9rZW5Sb3lhbHR5SW5mbyh0b2tlbklkLCB7XG4gICAqICAgc2VsbGVyX2ZlZV9iYXNpc19wb2ludHM6IDUwMCwgLy8gNSVcbiAgICogICBmZWVfcmVjaXBpZW50OiBcIjB4Li4uXCJcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cblxuICBjb25zdHJ1Y3RvcihuZXR3b3JrLCBhZGRyZXNzLCBzdG9yYWdlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIGxldCBhYmkgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgY2hhaW5JZCA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgIGxldCBjb250cmFjdFdyYXBwZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IG5ldyBDb250cmFjdFdyYXBwZXIobmV0d29yaywgYWRkcmVzcywgYWJpLCBvcHRpb25zKTtcbiAgICBzdXBlcihjb250cmFjdFdyYXBwZXIsIHN0b3JhZ2UsIGNoYWluSWQpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFiaVwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVuY29kZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJlc3RpbWF0b3JcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhZGF0YVwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFwcFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV2ZW50c1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvbGVzXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicm95YWx0aWVzXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib3duZXJcIiwgdm9pZCAwKTtcbiAgICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICogV1JJVEUgRlVOQ1RJT05TXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyoqXG4gICAgICogV3JhcCBhbnkgbnVtYmVyIG9mIEVSQzIwL0VSQzcyMS9FUkMxMTU1IHRva2VucyBpbnRvIGEgc2luZ2xlIHdyYXBwZWQgdG9rZW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LndyYXAoe1xuICAgICAqICAgZXJjMjBUb2tlbnM6IFt7XG4gICAgICogICAgIGNvbnRyYWN0QWRkcmVzczogXCIweC4uLlwiLFxuICAgICAqICAgICBxdWFudGl0eTogXCIwLjhcIlxuICAgICAqICAgfV0sXG4gICAgICogICBlcmM3MjFUb2tlbnM6IFt7XG4gICAgICogICAgIGNvbnRyYWN0QWRkcmVzczogXCIweC4uLlwiLFxuICAgICAqICAgICB0b2tlbklkOiBcIjBcIlxuICAgICAqICAgfV0sXG4gICAgICogICBlcmMxMTU1VG9rZW5zOiBbe1xuICAgICAqICAgICBjb250cmFjdEFkZHJlc3M6IFwiMHguLi5cIixcbiAgICAgKiAgICAgdG9rZW5JZDogXCIxXCIsXG4gICAgICogICAgIHF1YW50aXR5OiBcIjJcIlxuICAgICAqICAgfV1cbiAgICAgKiB9LCB7XG4gICAgICogICAgIG5hbWU6IFwiV3JhcHBlZCBidW5kbGVcIixcbiAgICAgKiAgICAgZGVzY3JpcHRpb246IFwiVGhpcyBpcyBhIHdyYXBwZWQgYnVuZGxlIG9mIHRva2VucyBhbmQgTkZUc1wiLFxuICAgICAqICAgICBpbWFnZTogXCJpcGZzOi8vLi4uXCIsXG4gICAgICogfSk7XG4gICAgICogY29uc3QgcmVjZWlwdCA9IHR4LnJlY2VpcHQoKTsgLy8gdGhlIHRyYW5zYWN0aW9uIHJlY2VpcHRcbiAgICAgKiBjb25zdCB3cmFwcGVkVG9rZW5JZCA9IHR4LmlkOyAvLyB0aGUgaWQgb2YgdGhlIHdyYXBwZWQgdG9rZW4gYnVuZGxlXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGNvbnRlbnRzIC0gdGhlIGNvbnRlbnRzIHRvIHdyYXBcbiAgICAgKiBAcGFyYW0gd3JhcHBlZFRva2VuTWV0YWRhdGEgLSBtZXRhZGF0YSB0byByZXByZXNlbnQgdGhlIHdyYXBwZWQgdG9rZW4gYnVuZGxlXG4gICAgICogQHBhcmFtIHJlY2lwaWVudEFkZHJlc3MgLSBPcHRpb25hbC4gVGhlIGFkZHJlc3MgdG8gc2VuZCB0aGUgd3JhcHBlZCB0b2tlbiBidW5kbGUgdG9cbiAgICAgKi9cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3cmFwXCIsIGJ1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAoY29udGVudHMsIHdyYXBwZWRUb2tlbk1ldGFkYXRhLCByZWNpcGllbnRBZGRyZXNzKSA9PiB7XG4gICAgICBjb25zdCB1cmkgPSBhd2FpdCB1cGxvYWRPckV4dHJhY3RVUkkod3JhcHBlZFRva2VuTWV0YWRhdGEsIHRoaXMuc3RvcmFnZSk7XG4gICAgICBjb25zdCByZWNpcGllbnQgPSBhd2FpdCByZXNvbHZlQWRkcmVzcyhyZWNpcGllbnRBZGRyZXNzID8gcmVjaXBpZW50QWRkcmVzcyA6IGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFNpZ25lckFkZHJlc3MoKSk7XG4gICAgICBjb25zdCB0b2tlbnMgPSBhd2FpdCB0aGlzLnRvVG9rZW5TdHJ1Y3RMaXN0KGNvbnRlbnRzKTtcbiAgICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tQ29udHJhY3RXcmFwcGVyKHtcbiAgICAgICAgY29udHJhY3RXcmFwcGVyOiB0aGlzLmNvbnRyYWN0V3JhcHBlcixcbiAgICAgICAgbWV0aG9kOiBcIndyYXBcIixcbiAgICAgICAgYXJnczogW3Rva2VucywgdXJpLCByZWNpcGllbnRdLFxuICAgICAgICBwYXJzZTogcmVjZWlwdCA9PiB7XG4gICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmNvbnRyYWN0V3JhcHBlci5wYXJzZUxvZ3MoXCJUb2tlbnNXcmFwcGVkXCIsIHJlY2VpcHQ/LmxvZ3MpO1xuICAgICAgICAgIGlmIChldmVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRva2Vuc1dyYXBwZWQgZXZlbnQgbm90IGZvdW5kXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB0b2tlbklkID0gZXZlbnRbMF0uYXJncy50b2tlbklkT2ZXcmFwcGVkVG9rZW47XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0b2tlbklkLFxuICAgICAgICAgICAgcmVjZWlwdCxcbiAgICAgICAgICAgIGRhdGE6ICgpID0+IHRoaXMuZ2V0KHRva2VuSWQpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSkpO1xuICAgIC8qKlxuICAgICAqIFVud3JhcCBhIHdyYXBwZWQgdG9rZW4gYnVuZGxlLCBhbmQgcmV0cmlldmUgaXRzIGNvbnRlbnRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogYXdhaXQgY29udHJhY3QudW53cmFwKHdyYXBwZWRUb2tlbklkKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gd3JhcHBlZFRva2VuSWQgLSB0aGUgaWQgb2YgdGhlIHdyYXBwZWQgdG9rZW4gYnVuZGxlXG4gICAgICogQHBhcmFtIHJlY2lwaWVudEFkZHJlc3MgLSBPcHRpb25hbC4gVGhlIGFkZHJlc3MgdG8gc2VuZCB0aGUgdW53cmFwcGVkIHRva2VucyB0b1xuICAgICAqL1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInVud3JhcFwiLCBidWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgKHdyYXBwZWRUb2tlbklkLCByZWNpcGllbnRBZGRyZXNzKSA9PiB7XG4gICAgICBjb25zdCByZWNpcGllbnQgPSBhd2FpdCByZXNvbHZlQWRkcmVzcyhyZWNpcGllbnRBZGRyZXNzID8gcmVjaXBpZW50QWRkcmVzcyA6IGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFNpZ25lckFkZHJlc3MoKSk7XG4gICAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUNvbnRyYWN0V3JhcHBlcih7XG4gICAgICAgIGNvbnRyYWN0V3JhcHBlcjogdGhpcy5jb250cmFjdFdyYXBwZXIsXG4gICAgICAgIG1ldGhvZDogXCJ1bndyYXBcIixcbiAgICAgICAgYXJnczogW3dyYXBwZWRUb2tlbklkLCByZWNpcGllbnRdXG4gICAgICB9KTtcbiAgICB9KSk7XG4gICAgdGhpcy5hYmkgPSBBYmlTY2hlbWEucGFyc2UoYWJpIHx8IFtdKTtcbiAgICB0aGlzLm1ldGFkYXRhID0gbmV3IENvbnRyYWN0TWV0YWRhdGEodGhpcy5jb250cmFjdFdyYXBwZXIsIE11bHRpd3JhcENvbnRyYWN0U2NoZW1hLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHRoaXMuYXBwID0gbmV3IENvbnRyYWN0QXBwVVJJKHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLm1ldGFkYXRhLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHRoaXMucm9sZXMgPSBuZXcgQ29udHJhY3RSb2xlcyh0aGlzLmNvbnRyYWN0V3JhcHBlciwgTXVsdGl3cmFwLmNvbnRyYWN0Um9sZXMpO1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBDb250cmFjdEVuY29kZXIodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXN0aW1hdG9yID0gbmV3IEdhc0Nvc3RFc3RpbWF0b3IodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IENvbnRyYWN0RXZlbnRzKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLnJveWFsdGllcyA9IG5ldyBDb250cmFjdFJveWFsdHkodGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMubWV0YWRhdGEpO1xuICAgIHRoaXMub3duZXIgPSBuZXcgQ29udHJhY3RPd25lcih0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gIH1cblxuICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFJFQUQgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbnRlbnRzIG9mIGEgd3JhcHBlZCB0b2tlbiBidW5kbGVcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBjb250ZW50cyA9IGF3YWl0IGNvbnRyYWN0LmdldFdyYXBwZWRDb250ZW50cyh3cmFwcGVkVG9rZW5JZCk7XG4gICAqIGNvbnNvbGUubG9nKGNvbnRlbnRzLmVyYzIwVG9rZW5zKTtcbiAgICogY29uc29sZS5sb2coY29udGVudHMuZXJjNzIxVG9rZW5zKTtcbiAgICogY29uc29sZS5sb2coY29udGVudHMuZXJjMTE1NVRva2Vucyk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gd3JhcHBlZFRva2VuSWQgLSB0aGUgaWQgb2YgdGhlIHdyYXBwZWQgdG9rZW4gYnVuZGxlXG4gICAqL1xuICBhc3luYyBnZXRXcmFwcGVkQ29udGVudHMod3JhcHBlZFRva2VuSWQpIHtcbiAgICBjb25zdCB3cmFwcGVkVG9rZW5zID0gYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZENvbnRyYWN0LmdldFdyYXBwZWRDb250ZW50cyh3cmFwcGVkVG9rZW5JZCk7XG4gICAgY29uc3QgZXJjMjBUb2tlbnMgPSBbXTtcbiAgICBjb25zdCBlcmM3MjFUb2tlbnMgPSBbXTtcbiAgICBjb25zdCBlcmMxMTU1VG9rZW5zID0gW107XG4gICAgZm9yIChjb25zdCB0b2tlbiBvZiB3cmFwcGVkVG9rZW5zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuLnRva2VuVHlwZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgdG9rZW5NZXRhZGF0YSA9IGF3YWl0IGZldGNoQ3VycmVuY3lNZXRhZGF0YSh0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRQcm92aWRlcigpLCB0b2tlbi5hc3NldENvbnRyYWN0KTtcbiAgICAgICAgICAgIGVyYzIwVG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IHRva2VuLmFzc2V0Q29udHJhY3QsXG4gICAgICAgICAgICAgIHF1YW50aXR5OiBldGhlcnMudXRpbHMuZm9ybWF0VW5pdHModG9rZW4udG90YWxBbW91bnQsIHRva2VuTWV0YWRhdGEuZGVjaW1hbHMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVyYzcyMVRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzOiB0b2tlbi5hc3NldENvbnRyYWN0LFxuICAgICAgICAgICAgICB0b2tlbklkOiB0b2tlbi50b2tlbklkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVyYzExNTVUb2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogdG9rZW4uYXNzZXRDb250cmFjdCxcbiAgICAgICAgICAgICAgdG9rZW5JZDogdG9rZW4udG9rZW5JZCxcbiAgICAgICAgICAgICAgcXVhbnRpdHk6IHRva2VuLnRvdGFsQW1vdW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZXJjMjBUb2tlbnMsXG4gICAgICBlcmM3MjFUb2tlbnMsXG4gICAgICBlcmMxMTU1VG9rZW5zXG4gICAgfTtcbiAgfVxuICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFBSSVZBVEUgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIGFzeW5jIHRvVG9rZW5TdHJ1Y3RMaXN0KGNvbnRlbnRzKSB7XG4gICAgY29uc3QgdG9rZW5zID0gW107XG4gICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRQcm92aWRlcigpO1xuICAgIGNvbnN0IG93bmVyID0gYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIuZ2V0U2lnbmVyQWRkcmVzcygpO1xuICAgIGlmIChjb250ZW50cy5lcmMyMFRva2Vucykge1xuICAgICAgZm9yIChjb25zdCBlcmMyMCBvZiBjb250ZW50cy5lcmMyMFRva2Vucykge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkUXVhbnRpdHkgPSBhd2FpdCBub3JtYWxpemVQcmljZVZhbHVlKHByb3ZpZGVyLCBlcmMyMC5xdWFudGl0eSwgZXJjMjAuY29udHJhY3RBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgaGFzQWxsb3dhbmNlID0gYXdhaXQgaGFzRVJDMjBBbGxvd2FuY2UodGhpcy5jb250cmFjdFdyYXBwZXIsIGVyYzIwLmNvbnRyYWN0QWRkcmVzcywgbm9ybWFsaXplZFF1YW50aXR5KTtcbiAgICAgICAgaWYgKCFoYXNBbGxvd2FuY2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVSQzIwIHRva2VuIHdpdGggY29udHJhY3QgYWRkcmVzcyBcIiR7ZXJjMjAuY29udHJhY3RBZGRyZXNzfVwiIGRvZXMgbm90IGhhdmUgZW5vdWdoIGFsbG93YW5jZSB0byB0cmFuc2Zlci5cXG5cXG5Zb3UgY2FuIHNldCBhbGxvd2FuY2UgdG8gdGhlIG11bHRpd3JhcCBjb250cmFjdCB0byB0cmFuc2ZlciB0aGVzZSB0b2tlbnMgYnkgcnVubmluZzpcXG5cXG5hd2FpdCBzZGsuZ2V0VG9rZW4oXCIke2VyYzIwLmNvbnRyYWN0QWRkcmVzc31cIikuc2V0QWxsb3dhbmNlKFwiJHt0aGlzLmdldEFkZHJlc3MoKX1cIiwgJHtlcmMyMC5xdWFudGl0eX0pO1xcblxcbmApO1xuICAgICAgICB9XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICBhc3NldENvbnRyYWN0OiBlcmMyMC5jb250cmFjdEFkZHJlc3MsXG4gICAgICAgICAgdG90YWxBbW91bnQ6IG5vcm1hbGl6ZWRRdWFudGl0eSxcbiAgICAgICAgICB0b2tlbklkOiAwLFxuICAgICAgICAgIHRva2VuVHlwZTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbnRlbnRzLmVyYzcyMVRva2Vucykge1xuICAgICAgZm9yIChjb25zdCBlcmM3MjEgb2YgY29udGVudHMuZXJjNzIxVG9rZW5zKSB7XG4gICAgICAgIGNvbnN0IGlzQXBwcm92ZWQgPSBhd2FpdCBpc1Rva2VuQXBwcm92ZWRGb3JUcmFuc2Zlcih0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRQcm92aWRlcigpLCB0aGlzLmdldEFkZHJlc3MoKSwgZXJjNzIxLmNvbnRyYWN0QWRkcmVzcywgZXJjNzIxLnRva2VuSWQsIG93bmVyKTtcbiAgICAgICAgaWYgKCFpc0FwcHJvdmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFUkM3MjEgdG9rZW4gXCIke2VyYzcyMS50b2tlbklkfVwiIHdpdGggY29udHJhY3QgYWRkcmVzcyBcIiR7ZXJjNzIxLmNvbnRyYWN0QWRkcmVzc31cIiBpcyBub3QgYXBwcm92ZWQgZm9yIHRyYW5zZmVyLlxcblxcbllvdSBjYW4gZ2l2ZSBhcHByb3ZhbCB0aGUgbXVsdGl3cmFwIGNvbnRyYWN0IHRvIHRyYW5zZmVyIHRoaXMgdG9rZW4gYnkgcnVubmluZzpcXG5cXG5hd2FpdCBzZGsuZ2V0TkZUQ29sbGVjdGlvbihcIiR7ZXJjNzIxLmNvbnRyYWN0QWRkcmVzc31cIikuc2V0QXBwcm92YWxGb3JUb2tlbihcIiR7dGhpcy5nZXRBZGRyZXNzKCl9XCIsICR7ZXJjNzIxLnRva2VuSWR9KTtcXG5cXG5gKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgYXNzZXRDb250cmFjdDogZXJjNzIxLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgICB0b3RhbEFtb3VudDogMCxcbiAgICAgICAgICB0b2tlbklkOiBlcmM3MjEudG9rZW5JZCxcbiAgICAgICAgICB0b2tlblR5cGU6IDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb250ZW50cy5lcmMxMTU1VG9rZW5zKSB7XG4gICAgICBmb3IgKGNvbnN0IGVyYzExNTUgb2YgY29udGVudHMuZXJjMTE1NVRva2Vucykge1xuICAgICAgICBjb25zdCBpc0FwcHJvdmVkID0gYXdhaXQgaXNUb2tlbkFwcHJvdmVkRm9yVHJhbnNmZXIodGhpcy5jb250cmFjdFdyYXBwZXIuZ2V0UHJvdmlkZXIoKSwgdGhpcy5nZXRBZGRyZXNzKCksIGVyYzExNTUuY29udHJhY3RBZGRyZXNzLCBlcmMxMTU1LnRva2VuSWQsIG93bmVyKTtcbiAgICAgICAgaWYgKCFpc0FwcHJvdmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFUkMxMTU1IHRva2VuIFwiJHtlcmMxMTU1LnRva2VuSWR9XCIgd2l0aCBjb250cmFjdCBhZGRyZXNzIFwiJHtlcmMxMTU1LmNvbnRyYWN0QWRkcmVzc31cIiBpcyBub3QgYXBwcm92ZWQgZm9yIHRyYW5zZmVyLlxcblxcbllvdSBjYW4gZ2l2ZSBhcHByb3ZhbCB0aGUgbXVsdGl3cmFwIGNvbnRyYWN0IHRvIHRyYW5zZmVyIHRoaXMgdG9rZW4gYnkgcnVubmluZzpcXG5cXG5hd2FpdCBzZGsuZ2V0RWRpdGlvbihcIiR7ZXJjMTE1NS5jb250cmFjdEFkZHJlc3N9XCIpLnNldEFwcHJvdmFsRm9yQWxsKFwiJHt0aGlzLmdldEFkZHJlc3MoKX1cIiwgdHJ1ZSk7XFxuXFxuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIGFzc2V0Q29udHJhY3Q6IGVyYzExNTUuY29udHJhY3RBZGRyZXNzLFxuICAgICAgICAgIHRvdGFsQW1vdW50OiBlcmMxMTU1LnF1YW50aXR5LFxuICAgICAgICAgIHRva2VuSWQ6IGVyYzExNTUudG9rZW5JZCxcbiAgICAgICAgICB0b2tlblR5cGU6IDJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b2tlbnM7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBwcmVwYXJlKG1ldGhvZCwgYXJncywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21Db250cmFjdFdyYXBwZXIoe1xuICAgICAgY29udHJhY3RXcmFwcGVyOiB0aGlzLmNvbnRyYWN0V3JhcHBlcixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGFyZ3MsXG4gICAgICBvdmVycmlkZXNcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIGNhbGwoZnVuY3Rpb25OYW1lLCBhcmdzLCBvdmVycmlkZXMpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cmFjdFdyYXBwZXIuY2FsbChmdW5jdGlvbk5hbWUsIGFyZ3MsIG92ZXJyaWRlcyk7XG4gIH1cbn1cbl9kZWZpbmVQcm9wZXJ0eShNdWx0aXdyYXAsIFwiY29udHJhY3RSb2xlc1wiLCBbXCJhZG1pblwiLCBcInRyYW5zZmVyXCIsIFwibWludGVyXCIsIFwidW53cmFwXCIsIFwiYXNzZXRcIl0pO1xuXG5leHBvcnQgeyBNdWx0aXdyYXAgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==